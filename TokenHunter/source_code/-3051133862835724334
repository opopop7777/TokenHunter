{"ERC20.sol":{"content":"pragma solidity ^0.5.11;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}"},"IERC20.sol":{"content":"pragma solidity ^0.5.11;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.5.11;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.11;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}"},"Token.sol":{"content":"pragma solidity ^0.5.11;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\ncontract Token is Ownable, ERC20 {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"Illuminat token\";\r\n    string public constant symbol = \"LUM\";\r\n    uint public constant decimals = 18;\r\n\r\n    uint public advisorsAmount;\r\n    uint public bountyAmount;\r\n    uint public teamAmount;\r\n\r\n    address public depositAddress;\r\n    uint private deployTime;\r\n    uint private lockTime = 2 * 365 days;\r\n\r\n    event PayService(string indexed _service, uint indexed _toDepositAddress);\r\n\r\n    constructor() public {\r\n        deployTime = now;\r\n\r\n        advisorsAmount = 1000000 * 10 ** decimals;\r\n        bountyAmount = 2000000 * 10 ** decimals;\r\n        teamAmount = 15000000 * 10 ** decimals;\r\n\r\n        _mint(address(this), 100000000 * 10 ** decimals);\r\n    }\r\n\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n    function setDepositAddress(address _depositAddress) public onlyOwner {\r\n        depositAddress = _depositAddress;\r\n    }\r\n\r\n    function payService(string memory service, address _to, uint amount) public {\r\n        uint tenPercents = amount.div(10);\r\n        transfer(depositAddress, tenPercents);\r\n        _burn(msg.sender, tenPercents);\r\n        transfer(_to, amount.sub(tenPercents.mul(2)));\r\n\r\n        emit PayService(service, tenPercents);\r\n    }\r\n\r\n    function sendTokens(address[] memory _receivers, uint[] memory _amounts) public onlyOwner {\r\n        require(_receivers.length == _amounts.length, \"The length of the arrays must be equal\");\r\n\r\n        for (uint i = 0; i \u003c _receivers.length; i++) {\r\n            _transfer(address(this), _receivers[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function transferTokens(address to, uint amount) public onlyOwner {\r\n        _transfer(address(this), to, amount);\r\n    }\r\n\r\n    function sendTeamTokens(address teamAddress, uint amount) public onlyOwner {\r\n        if(now \u003c deployTime.add(lockTime)){\r\n            require(teamAmount.sub(10000000*10**decimals) \u003e= amount, \"Not enough unlocked tokens amount\");\r\n        } else {\r\n            require(teamAmount \u003e= amount, \"Not enough tokens amount\");\r\n        }\r\n        teamAmount = teamAmount.sub(amount);\r\n        _transfer(address(this), teamAddress, amount);\r\n    }\r\n\r\n    function sendAdvisorsTokens(address advisorsAddress, uint amount) public onlyOwner {\r\n        if(now \u003c deployTime.add(lockTime)){\r\n            require(advisorsAmount.sub(650000*10**decimals) \u003e= amount, \"Not enough unlocked tokens amount\");\r\n        } else {\r\n            require(advisorsAmount \u003e= amount, \"Not enough tokens amount\");\r\n        }\r\n        advisorsAmount = advisorsAmount.sub(amount);\r\n        _transfer(address(this), advisorsAddress, amount);\r\n    }\r\n\r\n    function sendBountyTokens(address bountyAddress, uint amount) public onlyOwner {\r\n        require(bountyAmount \u003e= amount, \"Not enough tokens amount\");\r\n        bountyAmount = bountyAmount.sub(amount);\r\n        _transfer(address(this), bountyAddress, amount);\r\n    }\r\n}"}}