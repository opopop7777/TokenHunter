{"ERC20.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Math.sol\";\r\n\r\n\r\ncontract ERC20 is IERC20 {\r\n    using Math for uint256;\r\n\r\n    mapping (address =\u003e uint256) public balanceOf;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n    uint256 public totalSupply;\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(from, msg.sender, allowance[from][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedAmount) public returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedAmount));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedAmount) public returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedAmount));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(to != address(0), \"transfer to the zero address\");\r\n\r\n        balanceOf[from] = balanceOf[from].sub(amount);\r\n        balanceOf[to] = balanceOf[to].add(amount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balanceOf[account] = balanceOf[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n}\r\n"},"IERC20.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed from, address indexed to, uint256 amount);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n"},"Math.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n\r\nlibrary Math {\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a \u003e= b, \"subtraction underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n"},"Token.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nimport \"./ERC20.sol\";\r\n\r\n\r\ncontract Token is ERC20 {\r\n    string public constant name = \"SportsplexToken\";\r\n    string public constant symbol = \"SPX\";\r\n    uint8  public constant decimals = 8;\r\n\r\n    constructor() public {\r\n        uint256 supply = (10 ** 9);\r\n        _mint(msg.sender, supply.mul(10 ** uint256(decimals)));\r\n    }\r\n}\r\n"}}