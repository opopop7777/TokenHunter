{"StandardToken.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract Token{\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Burn(address indexed _from, uint256 _value);\r\n\r\n    event Freeze(address indexed _from, uint256 _value);\r\n\t\r\n    event Unfreeze(address indexed _from, uint256 _value);\r\n\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    mapping (address =\u003e uint256) balances;\r\n    mapping (address =\u003e uint256) freezes;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) allowed;\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] \u003e= _value \u0026\u0026 allowed[_from][msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }   \r\n}"},"xlt.sol":{"content":"import \"./StandardToken.sol\";\r\n\r\ncontract XLTCoinToken is StandardToken { \r\n\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n\r\n    constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol)  public{\r\n        totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);\r\n        balances[msg.sender] = totalSupply;\r\n        name = _tokenName; \r\n        decimals = _decimalUnits; \r\n        symbol = _tokenSymbol;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\r\n        balances[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] \u003e= _value \u0026\u0026 _value \u003e 0);\r\n        require(allowed[_from][msg.sender] \u003e= _value);\r\n        balances[_from] -= _value; \r\n        allowed[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    function freeze(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\r\n        balances[msg.sender] = balances[msg.sender] - _value; \r\n        freezes[msg.sender] = freezes[msg.sender] + _value;\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n    function unfreeze(uint256 _value) public returns (bool success) {\r\n        require(freezes[msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\r\n        freezes[msg.sender] = freezes[msg.sender] -  _value;\r\n\tbalances[msg.sender] = balances[msg.sender] + _value;\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n}"}}