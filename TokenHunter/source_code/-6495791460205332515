{"ERC20Standard.sol":{"content":"pragma solidity ^0.4.11;\n\n\ncontract ERC20Standard {\n\tuint public totalSupply;\n\n\tstring public name;\n\tuint8 public decimals;\n\tstring public symbol;\n\tstring public version;\n\n\tmapping (address =\u003e uint256) balances;\n\tmapping (address =\u003e mapping (address =\u003e uint)) allowed;\n\n\t//Fix for short address attack against ERC20\n\tmodifier onlyPayloadSize(uint size) {\n\t\tassert(msg.data.length == size + 4);\n\t\t_;\n\t} \n\n\tfunction balanceOf(address _owner) constant returns (uint balance) {\n\t\treturn balances[_owner];\n\t}\n\n\tfunction transfer(address _recipient, uint _value) onlyPayloadSize(2*32) {\n\t\trequire(balances[msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\n\t    balances[msg.sender] -= _value;\n\t    balances[_recipient] += _value;\n\t    Transfer(msg.sender, _recipient, _value);        \n    }\n\n\tfunction transferFrom(address _from, address _to, uint _value) {\n\t\trequire(balances[_from] \u003e= _value \u0026\u0026 allowed[_from][msg.sender] \u003e= _value \u0026\u0026 _value \u003e 0);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n    }\n\n\tfunction approve(address _spender, uint _value) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t}\n\n\tfunction allowance(address _spender, address _owner) constant returns (uint balance) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t//Event which is triggered to log all transfers to this contract\u0027s event log\n\tevent Transfer(\n\t\taddress indexed _from,\n\t\taddress indexed _to,\n\t\tuint _value\n\t\t);\n\n\t//Event which is triggered whenever an owner approves a new allowance for a spender.\n\tevent Approval(\n\t\taddress indexed _owner,\n\t\taddress indexed _spender,\n\t\tuint _value\n\t\t);\n\n}"},"NewToken.sol":{"content":"pragma solidity ^0.4.11;\n\nimport \"./ERC20Standard.sol\";\n\ncontract NewToken is ERC20Standard {\n\tfunction NewToken() {\n\t\ttotalSupply = 10000000000;\n\t\tname = \"Zenarius Token | ZENARIT\";\n\t\tdecimals = 2;\n\t\tsymbol = \"ZERT\";\n\t\tversion = \"1.1\";\n\t\tbalances[msg.sender] = totalSupply;\n\t}\n}"}}