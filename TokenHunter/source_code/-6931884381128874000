{"DFX.sol":{"content":"\r\npragma solidity ^0.4.26;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b \u003e 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c\u003e=a \u0026\u0026 c\u003e=b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract DFX is SafeMath{\r\n\r\n    string public name = \"DeFiProtocol\";\r\n    string public symbol = \"DFX\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 public INITIAL_SUPPLY = 10000000000000000000000000000;\r\n  \taddress public owner;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address =\u003e uint256) public balanceOf;\r\n  \tmapping (address =\u003e uint256) public freezeOf;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\t/* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n\r\n\t/* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor () public {\r\n        balanceOf[msg.sender] = INITIAL_SUPPLY;              // Give the creator all initial tokens\r\n        totalSupply = INITIAL_SUPPLY;                        // Update total supply\r\n\t\t    owner = msg.sender;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public {\r\n        require (_to != address(0),\"0 address not allowed\");           // Prevent transfer to 0x0 address. Use burn() instead\r\n\t    \trequire (_value \u003e 0, \"value invalid \");\r\n        require (balanceOf[msg.sender] \u003e= _value, \"balance not enough\") ;           // Check if the sender has enough\r\n        require (balanceOf[_to] + _value \u003e balanceOf[_to],\"overflow\") ; // Check for overflows\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n\t    \trequire (_value \u003e 0, \"value invalid\") ;\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\t\trequire (_to != address(0),\"0 address not allowed\");   // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\trequire (_value \u003e 0, \"value invalid \");\r\n        require (balanceOf[msg.sender] \u003e= _value, \"balance not enough\") ;  // Check if the sender has enough\r\n        require (balanceOf[_to] + _value \u003e balanceOf[_to],\"overflow\") ; // Check for overflows\r\n        require (_value \u003c= allowance[_from][msg.sender],\"allowance not enough\") ;     // Check allowance\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success)  {\r\n        require (balanceOf[msg.sender] \u003e= _value, \"balance not enough\") ;            // Check if the sender has enough\r\n\t    \trequire (_value \u003e 0, \"value invalid \");\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n  \tfunction freeze(uint256 _value) public returns (bool success) {\r\n        require (balanceOf[msg.sender] \u003e= _value, \"balance not enough\") ;       // Check if the sender has enough\r\n        require (_value \u003e 0, \"value invalid \");\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\r\n        emit Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n  \tfunction unfreeze(uint256 _value) public returns (bool success) {\r\n        require (balanceOf[msg.sender] \u003e= _value, \"balance not enough\") ;     // Check if the sender has enough\r\n\t    \t require (_value \u003e 0, \"value invalid \");\r\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\r\n\t\t    balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\r\n        emit Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\t// transfer balance to owner\r\n\tfunction withdrawEther(uint256 amount) public {\r\n\t\trequire(msg.sender == owner,\"only owner\");\r\n\t\towner.transfer(amount);\r\n\t}\r\n\r\n\t// can accept ether\r\n\tfunction() payable public{\r\n    }\r\n}\r\n"},"Migrations.sol":{"content":"pragma solidity \u003e=0.4.21 \u003c0.6.0;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n\n  function upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n"}}