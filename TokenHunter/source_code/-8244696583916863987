{"BnbSwap.sol":{"content":"pragma solidity ^0.5.7;\n\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\n\ncontract BnbSwap is Ownable {\n    mapping (address =\u003e string) public registers;\n\n    event Put(address indexed eth, string indexed bnb);\n\n    function put(string calldata _bnb) external {\n        require(bytes(registers[msg.sender]).length == 0, \"Already registered\");\n        registers[msg.sender] = _bnb;\n        emit Put(msg.sender, _bnb);\n    }\n\n    function transfer(\n        IERC20 _token,\n        address _to,\n        uint256 _value\n    )\n        external\n        onlyOwner\n    {\n        _token.transfer(_to, _value);\n    }\n\n    function approve(\n        IERC20 _token,\n        address _spender,\n        uint256 _value\n    )\n        external\n        onlyOwner\n    {\n        _token.approve(_spender, _value);\n    }\n\n    function transferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        onlyOwner\n    {\n        token.transferFrom(from, to, value);\n    }\n\n    function burn(\n        IERC20 token,\n        uint256 value\n    )\n        external\n        onlyOwner\n    {\n        token.burn(value);\n    }\n\n    function burnFrom(\n        IERC20 token,\n        address from,\n        uint256 value\n    )\n        external\n        onlyOwner\n    {\n        token.burnFrom(from, value);\n    }\n}\n"},"IERC20.sol":{"content":"pragma solidity ^0.5.7;\n\n/**\n * @title ERC20 interface without bool returns\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external;\n\n    function approve(address spender, uint256 value) external;\n\n    function transferFrom(address from, address to, uint256 value) external;\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function burn(uint256 value) external;\n\n    function burnFrom(address from, uint256 value) external;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"Ownable.sol":{"content":"pragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"}}