{"advanceToken.sol":{"content":"pragma solidity ^0.4.20;\n\nimport \u0027./owned.sol\u0027;\nimport \u0027./erc20.sol\u0027;\n\ncontract AdvanceToken is ERC20, owned {\n\n    mapping (address =\u003e bool) public frozenAccount;\n\n    event AddSupply(uint amount);\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address target, uint amount);\n\n    constructor () ERC20() public {\n\n    }\n\n    function mine(address target, uint amount) public onlyOwner {\n        totalSupply += amount;\n        balanceOf[target] += amount;\n\n        emit AddSupply(amount);\n        emit Transfer(0, target, amount);\n    }\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n        success = _transfer(msg.sender, _to, _value);\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] \u003e= _value);\n        success =  _transfer(_from, _to, _value);\n        allowed[_from][msg.sender] -= _value;\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n      require(_to != address(0));\n      require(!frozenAccount[_from]);\n\n      require(balanceOf[_from] \u003e= _value);\n      require(balanceOf[ _to] + _value \u003e= balanceOf[ _to]);\n\n      balanceOf[_from] -= _value;\n      balanceOf[_to] += _value;\n\n      emit Transfer(_from, _to, _value);\n      return true;\n  }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] \u003e= _value);\n\n        totalSupply -= _value;\n        balanceOf[msg.sender] -= _value;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value)  public returns (bool success) {\n        require(balanceOf[_from] \u003e= _value);\n        require(allowed[_from][msg.sender] \u003e= _value);\n\n        totalSupply -= _value;\n        balanceOf[msg.sender] -= _value;\n        allowed[_from][msg.sender] -= _value;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}\n"},"erc20.sol":{"content":"pragma solidity ^0.4.20;\n\nimport \u0027./erc20interface.sol\u0027;\n\ncontract ERC20 is ERC20Interface {\n    \n    mapping(address =\u003e uint256) public balanceOf;\n    mapping(address =\u003e mapping(address =\u003e uint256)) allowed;\n    \n    constructor() public {\n       name = \"Associated press Coins\";  // \"UpChain\";\n       symbol = \"APC\";\n       decimals = 0;\n       totalSupply = 300000000;\n       balanceOf[msg.sender] = totalSupply;\n    }\n    \n    \n  function transfer(address _to, uint256 _value) returns (bool success) {\n      require(_to != address(0));\n      require(balanceOf[msg.sender] \u003e= _value);\n      require(balanceOf[ _to] + _value \u003e= balanceOf[ _to]);\n      \n      \n      balanceOf[msg.sender] -= _value;\n      balanceOf[_to] += _value;\n      \n      emit Transfer(msg.sender, _to, _value);\n      \n      return true;\n  }\n  \n  \n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      require(_to != address(0));\n      require(allowed[_from][msg.sender] \u003e= _value);\n      require(balanceOf[_from] \u003e= _value);\n      require(balanceOf[ _to] + _value \u003e= balanceOf[ _to]);\n      \n      balanceOf[_from] -= _value;\n      balanceOf[_to] += _value;\n      \n      allowed[_from][msg.sender] -= _value;\n      \n      emit Transfer(msg.sender, _to, _value);\n      return true;\n  }\n  \n  function approve(address _spender, uint256 _value) returns (bool success) {\n      allowed[msg.sender][_spender] = _value;\n      \n      emit Approval(msg.sender, _spender, _value);\n      return true;\n  }\n  \n  function allowance(address _owner, address _spender) view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n  }\n\n}\n"},"erc20interface.sol":{"content":"pragma solidity ^0.4.20;\n\ncontract ERC20Interface {\n  string public name;\n  string public symbol;\n  uint8 public  decimals;\n  uint public totalSupply;\n\n\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  \n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) view returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n"},"ico.sol":{"content":"\npragma solidity ^0.4.16;\n\ninterface token {\n    function transfer(address receiver, uint amount) external ;\n}\n\ncontract Ico {\n    address public beneficiary;\n    uint public fundingGoal;\n    uint public amountRaised;\n\n    uint public deadline;\n    uint public price;\n    token public tokenReward;\n\n    mapping(address =\u003e uint256) public balanceOf;\n    bool crowdsaleClosed = false;\n\n    event GoalReached(address recipient, uint totalAmountRaised);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n\n    constructor (\n        uint fundingGoalInEthers,\n        uint durationInMinutes,\n        uint etherCostOfEachToken,\n        address addressOfTokenUsedAsReward\n    ) public {\n        beneficiary = msg.sender;\n        fundingGoal = fundingGoalInEthers * 1 ether;\n        deadline = now + durationInMinutes * 1 minutes;\n        price = etherCostOfEachToken * 1 ether;\n        tokenReward = token(addressOfTokenUsedAsReward);\n    }\n\n\n    function () public payable {\n        require(!crowdsaleClosed);\n\n        uint amount = msg.value;  // wei\n        balanceOf[msg.sender] += amount;\n\n        amountRaised += amount;\n\n        tokenReward.transfer(msg.sender, amount / price);\n\n        emit FundTransfer(msg.sender, amount, true);\n    }\n\n    modifier afterDeadline() {\n        if (now \u003e= deadline) {\n            _;\n        }\n    }\n\n\n    function checkGoalReached() public afterDeadline {\n        if (amountRaised \u003e= fundingGoal) {\n            emit GoalReached(beneficiary, amountRaised);\n        }\n        crowdsaleClosed = true;\n    }\n\n\n    function safeWithdrawal() public afterDeadline {\n\n        if (amountRaised \u003c fundingGoal) {\n            uint amount = balanceOf[msg.sender];\n            balanceOf[msg.sender] = 0;\n            if (amount \u003e 0) {\n                msg.sender.transfer(amount);\n                emit FundTransfer(msg.sender, amount, false);\n            }\n        }\n\n        if (fundingGoal \u003c= amountRaised \u0026\u0026 beneficiary == msg.sender) {\n            beneficiary.transfer(amountRaised);\n            emit FundTransfer(beneficiary, amountRaised, false);\n        }\n    }\n}\n"},"owned.sol":{"content":"pragma solidity ^0.4.20;\n\ncontract owned {\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnerShip(address newOwer) public onlyOwner {\n        owner = newOwer;\n    }\n\n}\n"}}