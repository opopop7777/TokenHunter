{"CheetahToken.sol":{"content":"/*\nImplements EIP20 token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n.*/\n\n\npragma solidity ^0.4.21;\n\nimport \"./EIP20Interface.sol\";\n\n\ncontract CheetahToken is EIP20Interface {\n\nuint256 constant private MAX_UINT256 = 2**256 - 1;\nmapping (address =\u003e uint256) public balances;\nmapping (address =\u003e mapping (address =\u003e uint256)) public allowed;\n/*\nNOTE:\nThe following variables are OPTIONAL vanities. One does not have to include them.\nThey allow one to customise the token contract \u0026 in no way influences the core functionality.\nSome wallets/interfaces might not even bother to look at this information.\n*/\nstring public name;                  \nuint8 public decimals;               \nstring public symbol;                 \n\nfunction CheetahToken(\nuint256 _initialAmount,\nstring _tokenName,\nuint8 _decimalUnits,\nstring _tokenSymbol \n) public {\nbalances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\ntotalSupply = _initialAmount;                        // Update total supply\nname = _tokenName;                                   // Set the name for display purposes\ndecimals = _decimalUnits;                            // Amount of decimals for display purposes\nsymbol = _tokenSymbol;                               // Set the symbol for display purposes\n}\n\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\nrequire(balances[msg.sender] \u003e= _value);\nbalances[msg.sender] -= _value;\nbalances[_to] += _value;\nemit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\nreturn true;\n}\n\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\nuint256 allowance = allowed[_from][msg.sender];\nrequire(balances[_from] \u003e= _value \u0026\u0026 allowance \u003e= _value);\nbalances[_to] += _value;\nbalances[_from] -= _value;\nif (allowance \u003c MAX_UINT256) {\nallowed[_from][msg.sender] -= _value;\n}\nemit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\nreturn true;\n}\n\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\nreturn balances[_owner];\n}\n\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\nallowed[msg.sender][_spender] = _value;\nemit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\nreturn true;\n}\n\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\nreturn allowed[_owner][_spender];\n}\n}\n"},"EIP20Interface.sol":{"content":"// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\npragma solidity ^0.4.21;\n\n\ncontract EIP20Interface {\n/* This is a slight change to the ERC20 base standard.\nfunction totalSupply() constant returns (uint256 supply);\nis replaced with:\nuint256 public totalSupply;\nThis automatically creates a getter function for the totalSupply.\nThis is moved to the base contract since public getter functions are not\ncurrently recognised as an implementation of the matching abstract\nfunction by the compiler.\n*/\n/// total amount of tokens\nuint256 public totalSupply;\n\n/// @param _owner The address from which the balance will be retrieved\n/// @return The balance\nfunction balanceOf(address _owner) public view returns (uint256 balance);\n\n/// @notice send `_value` token to `_to` from `msg.sender`\n/// @param _to The address of the recipient\n/// @param _value The amount of token to be transferred\n/// @return Whether the transfer was successful or not\nfunction transfer(address _to, uint256 _value) public returns (bool success);\n\n/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n/// @param _from The address of the sender\n/// @param _to The address of the recipient\n/// @param _value The amount of token to be transferred\n/// @return Whether the transfer was successful or not\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n/// @param _spender The address of the account able to transfer the tokens\n/// @param _value The amount of tokens to be approved for transfer\n/// @return Whether the approval was successful or not\nfunction approve(address _spender, uint256 _value) public returns (bool success);\n\n/// @param _owner The address of the account owning tokens\n/// @param _spender The address of the account able to transfer the tokens\n/// @return Amount of remaining tokens allowed to spent\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n// solhint-disable-next-line no-simple-event-func-name\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n"}}