{"DSAuth.sol":{"content":"// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\npragma solidity ^0.4.13;\n\ncontract DSAuthority {\n  function canCall(\n    address src, address dst, bytes4 sig\n  ) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n  event LogSetAuthority (address indexed authority);\n  event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n  DSAuthority  public  authority;\n  address      public  owner;\n\n  function DSAuth() public {\n    owner = msg.sender;\n    LogSetOwner(msg.sender);\n  }\n\n  function setOwner(address owner_)\n  public\n  auth\n  {\n    owner = owner_;\n    LogSetOwner(owner);\n  }\n\n  function setAuthority(DSAuthority authority_)\n  public\n  auth\n  {\n    authority = authority_;\n    LogSetAuthority(authority);\n  }\n\n  modifier auth {\n    require(isAuthorized(msg.sender, msg.sig));\n    _;\n  }\n\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n    if (src == address(this)) {\n      return true;\n    } else if (src == owner) {\n      return true;\n    } else if (authority == DSAuthority(0)) {\n      return false;\n    } else {\n      return authority.canCall(src, this, sig);\n    }\n  }\n}\n"},"DSGuard.sol":{"content":"// guard.sol -- simple whitelist implementation of DSAuthority\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n\npragma solidity ^0.4.13;\n\nimport \"./DSAuth.sol\";\n\ncontract DSGuardEvents {\n  event LogPermit(\n    bytes32 indexed src,\n    bytes32 indexed dst,\n    bytes32 indexed sig\n  );\n  event LogForbid(\n    bytes32 indexed src,\n    bytes32 indexed dst,\n    bytes32 indexed sig\n  );\n}\n\ncontract DSGuard is DSAuth, DSAuthority, DSGuardEvents {\n  bytes32 constant public ANY = bytes32(uint(- 1));\n  mapping(bytes32 =\u003e mapping(bytes32 =\u003e mapping(bytes32 =\u003e bool))) acl;\n\n  function canCall(\n    address src_, address dst_, bytes4 sig\n  ) public view returns (bool) {\n    bytes32 src = bytes32(src_);\n    bytes32 dst = bytes32(dst_);\n\n    return acl[src][dst][sig]\n    || acl[src][dst][ANY]\n    || acl[src][ANY][sig]\n    || acl[src][ANY][ANY]\n    || acl[ANY][dst][sig]\n    || acl[ANY][dst][ANY]\n    || acl[ANY][ANY][sig]\n    || acl[ANY][ANY][ANY];\n  }\n\n  function permit(bytes32 src, bytes32 dst, bytes32 sig) public auth {\n    acl[src][dst][sig] = true;\n    LogPermit(src, dst, sig);\n  }\n\n  function forbid(bytes32 src, bytes32 dst, bytes32 sig) public auth {\n    acl[src][dst][sig] = false;\n    LogForbid(src, dst, sig);\n  }\n\n  function permit(address src, address dst, bytes32 sig) public {\n    permit(bytes32(src), bytes32(dst), sig);\n  }\n\n  function forbid(address src, address dst, bytes32 sig) public {\n    forbid(bytes32(src), bytes32(dst), sig);\n  }\n}\n\ncontract DSGuardFactory {\n  mapping(address =\u003e bool)  public  isGuard;\n\n  function newGuard() public returns (DSGuard guard) {\n    guard = new DSGuard();\n    guard.setOwner(msg.sender);\n    isGuard[guard] = true;\n  }\n}\n"}}