{"NLB1.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n* */\r\nlibrary SafeMath {\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n// Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the // benefit is lost if \u0027b\u0027 is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nc = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n// uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\nreturn a / b;\r\n}\r\n/**\r\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b \u003c= a);\r\nreturn a - b;\r\n}\r\n\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nc = a + b;\r\nassert(c \u003e= a);\r\nreturn c;\r\n}\r\n}\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179 */\r\ncontract ERC20Basic {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool); event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances. */\r\n\r\ncontract BasicToken is ERC20Basic {\r\nusing SafeMath for uint256;\r\nmapping(address =\u003e uint256) balances;\r\nuint256 totalSupply_;\r\n\r\n/**\r\n* @dev total number of tokens in existence\r\n* */\r\nfunction totalSupply() public view returns (uint256){\r\nreturn totalSupply_;\r\n}\r\n\r\n/**\r\n* @dev transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_value \u003c= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true; //AUDIT// 返回值符合 EIP20 规范\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address. */\r\n\r\nfunction balanceOf(address _owner) public view returns (uint256) {\r\nreturn balances[_owner];\r\n}\r\n}\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20 */\r\n\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender)\r\npublic view returns (uint256);\r\n\r\nfunction transferFrom(address from, address to, uint256 value)\r\npublic returns (bool);\r\n\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\nmapping (address =\u003e mapping (address =\u003e uint256)) internal allowed;\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from * @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(\r\naddress _from,\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nrequire(_to != address(0));\r\nrequire(_value \u003c= balances[_from]);\r\nrequire(_value \u003c= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true; //AUDIT// 返回值符合 EIP20 规范\r\n}\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\nmsg.sender. *\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 * @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender. */\r\nfunction allowance(\r\naddress _owner,\r\naddress _spender\r\n)\r\npublic\r\nview\r\nreturns (uint256)\r\n{\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n}\r\n\r\n/* 父类:账户管理员 */\r\ncontract owned {\r\naddress public owner;\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nowner = newOwner;\r\n}\r\n}\r\n\r\n\r\ncontract NlbToken is owned, StandardToken {\r\nstring public name = \"NLB\";\r\nstring public symbol = \"NLB\";\r\nuint8 public decimals = 5;\r\n\r\n/* 构造函数 */\r\nconstructor() public {\r\n//发行量:10 亿(小数位:5)\r\ntotalSupply_ = 100 * 1000 * 10000 * 100000;\r\nbalances[msg.sender] = totalSupply_;\r\n}\r\n\r\n}\r\n"},"NLB2.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n* */\r\nlibrary SafeMath {\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n// Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the // benefit is lost if \u0027b\u0027 is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nc = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n// uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\nreturn a / b;\r\n}\r\n/**\r\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b \u003c= a);\r\nreturn a - b;\r\n}\r\n\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nc = a + b;\r\nassert(c \u003e= a);\r\nreturn c;\r\n}\r\n}\r\n\r\n/**\r\n* @title ERC20Basic\r\n* @dev Simpler version of ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/179 */\r\ncontract ERC20Basic {\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool); event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n* @title Basic token\r\n* @dev Basic version of StandardToken, with no allowances. */\r\n\r\ncontract BasicToken is ERC20Basic {\r\nusing SafeMath for uint256;\r\nmapping(address =\u003e uint256) balances;\r\nuint256 totalSupply_;\r\n\r\n/**\r\n* @dev total number of tokens in existence\r\n* */\r\nfunction totalSupply() public view returns (uint256){\r\nreturn totalSupply_;\r\n}\r\n\r\n/**\r\n* @dev transfer token for a specified address\r\n* @param _to The address to transfer to.\r\n* @param _value The amount to be transferred.\r\n*/\r\nfunction transfer(address _to, uint256 _value) public returns (bool) {\r\nrequire(_to != address(0));\r\nrequire(_value \u003c= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true; //AUDIT// 返回值符合 EIP20 规范\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param _owner The address to query the the balance of.\r\n* @return An uint256 representing the amount owned by the passed address. */\r\n\r\nfunction balanceOf(address _owner) public view returns (uint256) {\r\nreturn balances[_owner];\r\n}\r\n}\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20 */\r\n\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender)\r\npublic view returns (uint256);\r\n\r\nfunction transferFrom(address from, address to, uint256 value)\r\npublic returns (bool);\r\n\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\nmapping (address =\u003e mapping (address =\u003e uint256)) internal allowed;\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another\r\n* @param _from address The address which you want to send tokens from * @param _to address The address which you want to transfer to\r\n* @param _value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(\r\naddress _from,\r\naddress _to,\r\nuint256 _value\r\n)\r\npublic\r\nreturns (bool)\r\n{\r\nrequire(_to != address(0));\r\nrequire(_value \u003c= balances[_from]);\r\nrequire(_value \u003c= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\nreturn true; //AUDIT// 返回值符合 EIP20 规范\r\n}\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of\r\nmsg.sender. *\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 * @param _spender The address which will spend the funds.\r\n* @param _value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param _owner address The address which owns the funds.\r\n* @param _spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender. */\r\nfunction allowance(\r\naddress _owner,\r\naddress _spender\r\n)\r\npublic\r\nview\r\nreturns (uint256)\r\n{\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\n}\r\n\r\n/* 父类:账户管理员 */\r\ncontract owned {\r\naddress public owner;\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\nmodifier onlyOwner {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nowner = newOwner;\r\n}\r\n}\r\n\r\n\r\ncontract NlbToken is owned, StandardToken {\r\nstring public name = \"NLB\";\r\nstring public symbol = \"NLB\";\r\nuint8 public decimals = 5;\r\n\r\n/* 构造函数 */\r\nconstructor() public {\r\n//发行量:10 亿(小数位:5)\r\ntotalSupply_ = 100 * 1000 * 10000 * 100000;\r\nbalances[msg.sender] = totalSupply_;\r\n}\r\n\r\n}\r\n"}}