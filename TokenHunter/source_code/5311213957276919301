{"BTB.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\n\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\n\r\ncontract BITBUS {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address private BTB1;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint _totalSupply;\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    \r\n    constructor() public {\r\n\r\n        symbol = \"BTB\";\r\n        name = \"BITBUS\";\r\n        decimals = 18;\r\n        BTB1 = msg.sender;\r\n        _totalSupply = 10000000 * 10**uint(decimals);\r\n        _balances[BTB1] = _totalSupply;\r\n        emit Transfer(address(0), BTB1, _totalSupply);\r\n\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subValue));\r\n        return true;\r\n    }\r\n\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(msg.sender != spender);\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n\r\n    function () external payable {\r\n    }\r\n    \r\n\r\n    function ClaimEther(uint256 amount) public{\r\n\t\trequire(msg.sender == BTB1);\r\n\t\tmsg.sender.transfer(amount);\r\n\t}\r\n\t\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(to != address(this));\r\n        require(value != 0);\r\n        _balances[to] = _balances[to].add(value);\r\n        _balances[from] = _balances[from].sub(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n\r\n\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n"}}