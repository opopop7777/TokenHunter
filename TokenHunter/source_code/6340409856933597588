{"BasicCrowdsale.sol":{"content":"    pragma solidity ^0.4.24;\r\n\r\n    import \"./SafeMath.sol\";\r\n    import \"./Ownable.sol\";\r\n    import \"./BasicERC20.sol\";\r\n    \r\n    contract BasicCrowdsale is Ownable\r\n    {\r\n        using SafeMath for uint256;\r\n        BasicERC20 token;\r\n\r\n        address public ownerWallet;\r\n        uint256 public startTime;\r\n        uint256 public endTime;\r\n        uint256 public totalEtherRaised = 0;\r\n        uint256 public minDepositAmount;\r\n        uint256 public maxDepositAmount;\r\n\r\n        uint256 public softCapEther;\r\n        uint256 public hardCapEther;\r\n\r\n        mapping(address =\u003e uint256) private deposits;\r\n\r\n        constructor () public {\r\n\r\n        }\r\n\r\n        function () external payable {\r\n            buy(msg.sender);\r\n        }\r\n\r\n        function getSettings () view public returns(uint256 _startTime,\r\n            uint256 _endTime,\r\n            uint256 _rate,\r\n            uint256 _totalEtherRaised,\r\n            uint256 _minDepositAmount,\r\n            uint256 _maxDepositAmount,\r\n            uint256 _tokensLeft ) {\r\n\r\n            _startTime = startTime;\r\n            _endTime = endTime;\r\n            _rate = getRate();\r\n            _totalEtherRaised = totalEtherRaised;\r\n            _minDepositAmount = minDepositAmount;\r\n            _maxDepositAmount = maxDepositAmount;\r\n            _tokensLeft = tokensLeft();\r\n        }\r\n\r\n        function tokensLeft() view public returns (uint256)\r\n        {\r\n            return token.balanceOf(address(0x0));\r\n        }\r\n\r\n        function changeMinDepositAmount (uint256 _minDepositAmount) onlyOwner public {\r\n            minDepositAmount = _minDepositAmount;\r\n        }\r\n\r\n        function changeMaxDepositAmount (uint256 _maxDepositAmount) onlyOwner public {\r\n            maxDepositAmount = _maxDepositAmount;\r\n        }\r\n\r\n        function getRate() view public returns (uint256) {\r\n            assert(false);\r\n        }\r\n\r\n        function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\r\n            return weiAmount.mul(getRate());\r\n        }\r\n\r\n        function checkCorrectPurchase() view internal {\r\n            require(startTime \u003c now \u0026\u0026 now \u003c endTime);\r\n            require(msg.value \u003e= minDepositAmount);\r\n            require(msg.value \u003c maxDepositAmount);\r\n            require(totalEtherRaised + msg.value \u003c hardCapEther);\r\n        }\r\n\r\n        function isCrowdsaleFinished() view public returns(bool)\r\n        {\r\n            return totalEtherRaised \u003e= hardCapEther || now \u003e endTime;\r\n        }\r\n\r\n        function buy(address userAddress) public payable {\r\n            require(userAddress != address(0));\r\n            checkCorrectPurchase();\r\n\r\n            // calculate token amount to be created\r\n            uint256 tokens = getTokenAmount(msg.value);\r\n\r\n            // update state\r\n            totalEtherRaised = totalEtherRaised.add(msg.value);\r\n\r\n            token.transferFrom(address(0x0), userAddress, tokens);\r\n\r\n            if (totalEtherRaised \u003e= softCapEther)\r\n            {\r\n                ownerWallet.transfer(this.balance);\r\n            }\r\n            else\r\n            {\r\n                deposits[userAddress] = deposits[userAddress].add(msg.value);\r\n            }\r\n        }\r\n\r\n        function getRefundAmount(address userAddress) view public returns (uint256)\r\n        {\r\n            if (totalEtherRaised \u003e= softCapEther) return 0;\r\n            return deposits[userAddress];\r\n        }\r\n\r\n        function refund(address userAddress) public\r\n        {\r\n            assert(totalEtherRaised \u003c softCapEther \u0026\u0026 now \u003e endTime);\r\n            uint256 amount = deposits[userAddress];\r\n            deposits[userAddress] = 0;\r\n            userAddress.transfer(amount);\r\n        }\r\n    }"},"BasicERC20.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\ncontract BasicERC20\r\n{\r\n    /* Public variables of the token */\r\n    string public standard = \u0027ERC20\u0027;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    bool public isTokenTransferable = true;\r\n\r\n    /* This creates an array with all balances */\r\n    mapping (address =\u003e uint256) public balanceOf;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public {\r\n        assert(isTokenTransferable);\r\n        assert(balanceOf[msg.sender] \u003e= _value);             // Check if the sender has enough\r\n        if (balanceOf[_to] + _value \u003c balanceOf[_to]) throw; // Check for overflows\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success)  {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        assert(isTokenTransferable || _from == address(0x0)); // allow to transfer for crowdsale\r\n        if (balanceOf[_from] \u003c _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value \u003c balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value \u003e allowance[_from][msg.sender]) throw;   // Check allowance\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n}"},"CrowdsaleCompatible.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\nimport \"./BasicERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./BasicCrowdsale.sol\";\r\n\r\ncontract CrowdsaleCompatible is BasicERC20, Ownable\r\n{\r\n    BasicCrowdsale public crowdsale = BasicCrowdsale(0x0);\r\n\r\n    // anyone can unfreeze tokens when crowdsale is finished\r\n    function unfreezeTokens() public\r\n    {\r\n        assert(now \u003e crowdsale.endTime());\r\n        isTokenTransferable = true;\r\n    }\r\n\r\n    // change owner to 0x0 to lock this function\r\n    function initializeCrowdsale(address crowdsaleContractAddress, uint256 tokensAmount) onlyOwner public  {\r\n        transfer((address)(0x0), tokensAmount);\r\n        allowance[(address)(0x0)][crowdsaleContractAddress] = tokensAmount;\r\n        crowdsale = BasicCrowdsale(crowdsaleContractAddress);\r\n        isTokenTransferable = false;\r\n        transferOwnership(0x0); // remove an owner\r\n    }\r\n}"},"EditableToken.sol":{"content":"\r\npragma solidity ^0.4.24;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./BasicERC20.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\ncontract EditableToken is BasicERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // change owner to 0x0 to lock this function\r\n    function editTokenProperties(string _name, string _symbol, int256 extraSupplay) onlyOwner public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        if (extraSupplay \u003e 0)\r\n        {\r\n            balanceOf[owner] = balanceOf[owner].add(uint256(extraSupplay));\r\n            totalSupply = totalSupply.add(uint256(extraSupplay));\r\n            emit Transfer(address(0x0), owner, uint256(extraSupplay));\r\n        }\r\n        else if (extraSupplay \u003c 0)\r\n        {\r\n            balanceOf[owner] = balanceOf[owner].sub(uint256(extraSupplay * -1));\r\n            totalSupply = totalSupply.sub(uint256(extraSupplay * -1));\r\n            emit Transfer(owner, address(0x0), uint256(extraSupplay * -1));\r\n        }\r\n    }\r\n}"},"ERC20Token.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./CrowdsaleCompatible.sol\";\r\nimport \"./EditableToken.sol\";\r\nimport \"./ThirdPartyTransferableToken.sol\";\r\n\r\ncontract ERC20Token is CrowdsaleCompatible, EditableToken, ThirdPartyTransferableToken {\r\n    using SafeMath for uint256;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() public\r\n    {\r\n        balanceOf[0xfbc11249f0638dd7b3464184a34840870e32575b] = uint256(300000000) * 10**18;\r\n        emit Transfer(address(0x0), 0xfbc11249f0638dd7b3464184a34840870e32575b, balanceOf[0xfbc11249f0638dd7b3464184a34840870e32575b]);\r\n\r\n        transferOwnership(0xfbc11249f0638dd7b3464184a34840870e32575b);\r\n\r\n        totalSupply = 300000000 * 10**18;                  // Update total supply\r\n        name = \u0027MaharlikaCoin\u0027;                                   // Set the name for display purposes\r\n        symbol = \u0027MHLK\u0027;                               // Set the symbol for display purposes\r\n        decimals = 18;                                           // Amount of decimals for display purposes\r\n    }\r\n\r\n    /* This unnamed function is called whenever someone tries to send ether to it */\r\n    function () public {\r\n        assert(false);     // Prevents accidental sending of ether\r\n    }\r\n}"},"Ownable.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}"},"SafeMath.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003c= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c \u003e= a);\r\n        return c;\r\n    }\r\n}"},"ThirdPartyTransferableToken.sol":{"content":"pragma solidity ^0.4.24;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./BasicERC20.sol\";\r\n\r\ncontract ThirdPartyTransferableToken is BasicERC20{\r\n    using SafeMath for uint256;\r\n\r\n    struct confidenceInfo {\r\n        uint256 nonce;\r\n        mapping (uint256 =\u003e bool) operation;\r\n    }\r\n    mapping (address =\u003e confidenceInfo) _confidence_transfers;\r\n\r\n    function nonceOf(address src) view public returns (uint256) {\r\n        return _confidence_transfers[src].nonce;\r\n    }\r\n\r\n    function transferByThirdParty(uint256 nonce, address where, uint256 amount, uint8 v, bytes32 r, bytes32 s) public returns (bool){\r\n        assert(where != address(this));\r\n        assert(where != address(0x0));\r\n\r\n        bytes32 hash = sha256(this, nonce, where, amount);\r\n        address src = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),v,r,s);\r\n        assert(balanceOf[src] \u003e= amount);\r\n        assert(nonce == _confidence_transfers[src].nonce+1);\r\n\r\n        assert(_confidence_transfers[src].operation[uint256(hash)]==false);\r\n\r\n        balanceOf[src] = balanceOf[src].sub(amount);\r\n        balanceOf[where] = balanceOf[where].add(amount);\r\n        _confidence_transfers[src].nonce += 1;\r\n        _confidence_transfers[src].operation[uint256(hash)] = true;\r\n\r\n        emit Transfer(src, where, amount);\r\n\r\n        return true;\r\n    }\r\n}"}}