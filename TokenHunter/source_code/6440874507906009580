pragma solidity ^0.5.0;

library SafeMath {

	function add(uint256 a, uint256 b) internal pure returns (uint256) {
		uint256 c = a + b;
		require(c >= a, "SafeMath: addition overflow");
		return c;
	}

	function sub(uint256 a, uint256 b) internal pure returns (uint256) {
		require(b <= a, "SafeMath: subtraction overflow");
		uint256 c = a - b;
		return c;
	}

	function mul(uint256 a, uint256 b) internal pure returns (uint256) {
		if (a == 0) {
			return 0;
		}
		uint256 c = a * b;
		require(c / a == b, "SafeMath: multiplication overflow");
		return c;
	}

	function div(uint256 a, uint256 b) internal pure returns (uint256) {
		require(b > 0, "SafeMath: division by zero");
		uint256 c = a / b;
		return c;
	}

	function mod(uint256 a, uint256 b) internal pure returns (uint256) {
		require(b != 0, "SafeMath: modulo by zero");
		uint256 c = a % b;
		return c;
	}

}

contract ERC20 {

	function totalSupply() public view returns (uint256);
	function balanceOf(address tokenOwner) public view returns (uint256 balance);
	function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);
	function transfer(address to, uint256 tokens) public returns (bool success);
	function approve(address spender, uint256 tokens) public returns (bool success);
	function transferFrom(address from, address to, uint256 tokens) public returns (bool success);

	event Transfer(address indexed from, address indexed to, uint256 tokens);
	event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);

}

contract ApproveAndCallFallBack {
	function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;
}

contract Owned {

	address public owner;
	address public newOwner;

	event OwnershipTransferred(address indexed _from, address indexed _to);

	constructor() public {
		owner = msg.sender;
	}

	modifier onlyOwner {
		require(msg.sender == owner);
		_;
	}

	function transferOwnership(address _newOwner) public onlyOwner {
		newOwner = _newOwner;
	}

	function acceptOwnership() public {
		require(msg.sender == newOwner);
		emit OwnershipTransferred(owner, newOwner);
		owner = newOwner;
		newOwner = address(0);
	}

}

contract NicosCoin is ERC20, Owned {

	using SafeMath for uint256;

	string public symbol;
	string public name;
	uint8 public decimals;
	uint256 _totalSupply;

	mapping(address => uint256) balances;
	mapping(address => mapping(address => uint256)) allowed;

	constructor(string memory _symbol, string memory _name) public {
		symbol = _symbol;
		name = _name;
		decimals = 12;
		_totalSupply = 2000000000 * 10**uint256(decimals);
		balances[owner] = _totalSupply;
		emit Transfer(address(0), owner, _totalSupply);
	}

	function totalSupply() public view returns (uint256) {
		return _totalSupply.sub(balances[address(0)]);
	}

    function balanceOf(address tokenOwner) public view returns (uint256 balance) {
		return balances[tokenOwner];
    }

    function transfer(address to, uint256 tokens) public returns (bool success) {
		balances[msg.sender] = balances[msg.sender].sub(tokens);
		balances[to] = balances[to].add(tokens);
		emit Transfer(msg.sender, to, tokens);
		return true;
    }

    function approve(address spender, uint256 tokens) public returns (bool success) {
		allowed[msg.sender][spender] = tokens;
		emit Approval(msg.sender, spender, tokens);
		return true;
    }

    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {
		balances[from] = balances[from].sub(tokens);
		allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
		balances[to] = balances[to].add(tokens);
		emit Transfer(from, to, tokens);
		return true;
    }

    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {
		return allowed[tokenOwner][spender];
    }

    function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {
		allowed[msg.sender][spender] = tokens;
		emit Approval(msg.sender, spender, tokens);
		ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
		return true;
    }

    function () external payable {
		revert();
    }

    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {
		return ERC20(tokenAddress).transfer(owner, tokens);
    }

}