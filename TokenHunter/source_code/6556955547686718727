{"ConditionTimestampPassed.sol":{"content":"pragma solidity ^0.6.0;\n\nimport \"./IGelatoCondition.sol\";\n\ncontract ConditionTimestampPassed is IGelatoCondition {\n\n    enum Reason {\n        // StandardReason Fields\n        Ok,  // 0: Standard Field for Fulfilled Conditions and No Errors\n        NotOk,  // 1: Standard Field for Unfulfilled Conditions or Caught/Handled Errors\n        UnhandledError,  // 2: Standard Field for Uncaught/Unhandled Errors\n        // Ok: Conditions fulfilled\n        OkTimestampPassed,\n        // NotOk: Unfulfilled Conditions\n        NotOkTimestampDidNotPass\n    }\n\n    // conditionSelector public state variable np due to this.actionSelector constant issue\n    function conditionSelector() external pure override returns(bytes4) {\n        return this.reached.selector;\n    }\n    uint256 public constant override conditionGas = 30000;\n\n    function reached(uint256 _timestamp)\n        external\n        view\n        returns(bool, uint8)  // executable?, reason\n    {\n        if (_timestamp \u003c= block.timestamp) return (true, uint8(Reason.OkTimestampPassed));\n        else return(false, uint8(Reason.NotOkTimestampDidNotPass));\n    }\n\n    function getConditionValue(uint256) external view returns(uint256) {\n        return block.timestamp;\n    }\n}"},"IGelatoCondition.sol":{"content":"pragma solidity ^0.6.0;\n\n/// @title IGelatoCondition - solidity interface of GelatoConditionsStandard\n/// @notice all the APIs of GelatoConditionsStandard\n/// @dev all the APIs are implemented inside GelatoConditionsStandard\ninterface IGelatoCondition {\n    /* CAUTION All Conditions must reserve the first 3 fields of their `enum Reason` as such:\n        0: Ok,  // 0: standard field for Fulfilled Conditions and No Errors\n        1: NotOk,  // 1: standard field for Unfulfilled Conditions or Handled Errors\n        2: UnhandledError  // 2: standard field for Unhandled or Uncaught Errors\n    */\n\n    /* CAUTION: the following functions are part of the standard IGelatoCondition interface but cannot be overriden\n        - \"function reached(args) external view\": non-standardisable due to different arguments passed across different conditions\n        - \"function getConditionValue(same args as reached function) external view/pure\": always takes same args as reached()\n    */\n\n    function conditionSelector() external pure returns(bytes4);\n    function conditionGas() external pure returns(uint256);\n}"}}