{"IERC20.sol":{"content":"pragma solidity 0.5.12;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"MultiSender.sol":{"content":"pragma solidity 0.5.12;\n\n\nimport \"./IERC20.sol\";\n\n\ncontract TokenMultiSender {\n\n    uint256 internal constant ARRAY_LIMIT = 50;\n    \n    address constant public token = 0x1C83501478f1320977047008496DACBD60Bb15ef;\n\n    event MultiSent(address[] receivers, uint256[] amounts);\n    \n    function tokenFallback(address sender, uint total, bytes calldata data) external {\n        require(data.length \u003e 0, \"Token transfer without data\");\n        address[] memory receivers;\n        uint256[] memory amounts;\n        (receivers, amounts) = abi.decode(data, (address[], uint256[]));\n        \n        require(receivers.length \u003c= ARRAY_LIMIT, \"Array length limit\");\n        require(receivers.length == amounts.length, \"Arrays lengths are different\");\n        \n        uint256 i = 0;\n        uint256 length = receivers.length;\n        for (i; i \u003c length; i++) {\n            require(total \u003e= amounts[i], \"token value is less than sum of amounts\");\n            (bool success, ) = token.call.gas(80000)(abi.encodeWithSelector(IERC20(token).transfer.selector, receivers[i], amounts[i]));\n            if (success) {\n                total = total - amounts[i];\n            }\n        }\n        \n        if (total \u003e 0) {\n            IERC20(token).transfer(sender, total);\n        }\n        \n        emit MultiSent(receivers, amounts);\n    }\n\n}\n"}}