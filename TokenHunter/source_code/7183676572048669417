{"ERC20.sol":{"content":"pragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  uint256 public totalSupply;\n\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n"},"TimeLockedWallet.sol":{"content":"pragma solidity ^0.4.18;\n\nimport \"./ERC20.sol\";\n\ncontract TimeLockedWallet {\n\n    address public creator;\n    address public owner;\n    uint256 public unlockDate;\n    uint256 public createdAt;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function TimeLockedWallet(\n        address _creator,\n        address _owner,\n        uint256 _unlockDate\n    ) public {\n        creator = _creator;\n        owner = _owner;\n        unlockDate = _unlockDate;\n        createdAt = now;\n    }\n\n    // keep all the ether sent to this address\n    function() payable public { \n        Received(msg.sender, msg.value);\n    }\n\n    // callable by owner only, after specified time\n    function withdraw() onlyOwner public {\n       require(now \u003e= unlockDate);\n       //now send all the balance\n       msg.sender.transfer(this.balance);\n       Withdrew(msg.sender, this.balance);\n    }\n\n    // callable by owner only, after specified time, only for Tokens implementing ERC20\n    function withdrawTokens(address _tokenContract) onlyOwner public {\n       require(now \u003e= unlockDate);\n       ERC20 token = ERC20(_tokenContract);\n       //now send all the token balance\n       uint256 tokenBalance = token.balanceOf(this);\n       token.transfer(owner, tokenBalance);\n       WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\n    }\n\n    function info() public view returns(address, address, uint256, uint256, uint256) {\n        return (creator, owner, unlockDate, createdAt, this.balance);\n    }\n\n    event Received(address from, uint256 amount);\n    event Withdrew(address to, uint256 amount);\n    event WithdrewTokens(address tokenContract, address to, uint256 amount);\n}\n"}}