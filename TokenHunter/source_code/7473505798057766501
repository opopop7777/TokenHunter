{"gj_token (1).sol":{"content":"//1.设置代币总量的时候，不要添加后面的小数位数;\r\n//2.转移代币时，需要添加小数位数,例如(小数点后4为):需要转移66.1234个代币，输入661234\r\n\r\npragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address =\u003e uint256) public balanceOf;   \r\n  \r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 tokenDecimals) public {\r\n        decimals = tokenDecimals;\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] \u003e= _value);       \r\n        require(balanceOf[_to] + _value \u003e balanceOf[_to]);  \r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];  \r\n        balanceOf[_from] -= _value; \r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);   \r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value); \r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value \u003c= allowance[_from][msg.sender]);     \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;   \r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n   \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] \u003e= _value);   \r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n   \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] \u003e= _value);        \r\n        require(_value \u003c= allowance[_from][msg.sender]);   \r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}"},"gj_token.sol":{"content":"//1.设置代币总量的时候，不要添加后面的小数位数;\r\n//2.转移代币时，需要添加小数位数,例如(小数点后4为):需要转移66.1234个代币，输入661234\r\n\r\npragma solidity ^0.4.16;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract TokenERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping (address =\u003e uint256) public balanceOf;   \r\n  \r\n    mapping (address =\u003e mapping (address =\u003e uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 tokenDecimals) public {\r\n        decimals = tokenDecimals;\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] \u003e= _value);       \r\n        require(balanceOf[_to] + _value \u003e balanceOf[_to]);  \r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];  \r\n        balanceOf[_from] -= _value; \r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);   \r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value); \r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value \u003c= allowance[_from][msg.sender]);     \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;   \r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n   \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] \u003e= _value);   \r\n        balanceOf[msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n   \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] \u003e= _value);        \r\n        require(_value \u003c= allowance[_from][msg.sender]);   \r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}"}}