{"Ownable.sol":{"content":"pragma solidity 0.5.0;\n\ncontract Ownable {\n   address payable public owner;\n\n   event OwnershipTransferred(address indexed _from, address indexed _to);\n\n   constructor() public {\n       owner = msg.sender;\n   }\n\n   modifier onlyOwner {\n       require(msg.sender == owner);\n       _;\n   }\n\n   function transferOwnership(address payable _newOwner) public onlyOwner {\n       owner = _newOwner;\n   }\n}\n"},"Referral.sol":{"content":"pragma solidity 0.5.0;\n\nimport \"./Ownable.sol\";\n\ncontract Referral is Ownable {\n    \n    struct MasterWithSlave {\n        address payable master;\n        address payable slave;\n        uint256 masterPercent;\n        uint256 slavePercent;\n        string investorCode;\n        bool isMasterValid;\n        bool isSlaveValid;\n    }\n    \n    struct Master {\n        address payable master;\n        uint256 masterPercent;\n        string investorCode;\n        bool isMasterValid;\n    }\n    \n    MasterWithSlave[] public masterWithSlaveData;\n    Master[] public masterData;\n    address payable zeroAddress = 0x0000000000000000000000000000000000000000;\n    \n    mapping(string =\u003e uint256) private investorCodeToMasterWithSlaveIndex;\n    mapping(string =\u003e uint256) private investorCodeToMasterIndex;\n    \n   constructor () public {\n       \n       MasterWithSlave memory newData1 = MasterWithSlave(zeroAddress, zeroAddress,0, 0 ,\"null\",false ,false);\n        masterWithSlaveData.push(newData1);\n        investorCodeToMasterWithSlaveIndex[\"null\"] = masterWithSlaveData.length -1;\n        \n         Master memory newData2 = Master(zeroAddress, 0 , \"null\" , false );\n        \n        masterData.push(newData2);\n        investorCodeToMasterWithSlaveIndex[\"null\"] = masterData.length -1 ;\n    }\n    \n    // Get index by investor code\n    \n    function getMasterWithSlaveIndexByInvestorCode(string memory _investorCode) public view returns(uint256){\n        return investorCodeToMasterWithSlaveIndex[_investorCode];\n    }\n       \n    function getMasterIndexByInvestorCode(string memory _investorCode) public view returns(uint256){\n        return investorCodeToMasterIndex[_investorCode];\n    }\n    \n    // Valid functions\n    \n    \n    function isMasterValid (string memory _investorCode) public view returns (bool){\n        uint256 index = investorCodeToMasterIndex[_investorCode];\n        return masterData[index].isMasterValid;\n    }\n    \n    function isMasterWithSlaveValid(string memory _investorCode) public view returns(bool){\n         uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\n         return masterWithSlaveData[index].isSlaveValid;\n    }\n    \n    function isSlaveValid(string memory _investorCode) public view returns(bool) {\n        uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\n        return masterWithSlaveData[index].isSlaveValid;\n    }\n    \n    // Address functions\n    function getMasterAddress(string memory _investorCode) public view returns(address payable) {\n        uint256 index = investorCodeToMasterIndex[_investorCode];\n        return masterData[index].master;\n    }\n    \n    function getMasterWithSlaveAddress(string memory _investorCode) public view returns(address payable){\n          uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\n        return masterWithSlaveData[index].master;\n    }\n    \n    function getSlaveAddress(string memory _investorCode) public view returns(address payable) {\n        uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\n        return masterWithSlaveData[index].slave;\n    }\n\n    // Percentage Functions\n       \n    function getMasterPercent(string memory _investorCode) public view returns(uint256) {\n        uint256 index = investorCodeToMasterIndex[_investorCode];\n        return masterData[index].masterPercent;\n    }\n    \n    function getMasterWithSlavePercent(string memory _investorCode) public view returns(uint256) {\n        uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\n        return masterWithSlaveData[index].masterPercent;\n    }\n    \n    function getSlavePercent(string memory _investorCode) public view returns(uint256) {\n       uint256 index = investorCodeToMasterWithSlaveIndex[_investorCode];\n        return masterWithSlaveData[index].slavePercent;\n    }\n    \n    // Insert functions \n    \n    function addMasterWithSlave(address payable _master, address payable _slave, uint256 _masterPercent, uint256 _slavePercent , string memory _investorCode ) public onlyOwner {\n        require(getMasterWithSlaveIndexByInvestorCode(_investorCode) == 0 \u0026\u0026 getMasterIndexByInvestorCode(_investorCode) == 0 );\n        \n        MasterWithSlave memory newData = MasterWithSlave(_master, _slave, _masterPercent, _slavePercent , _investorCode  ,true ,true);\n        \n        masterWithSlaveData.push(newData);\n        investorCodeToMasterWithSlaveIndex[_investorCode] = masterWithSlaveData.length -1;\n    }\n    \n    function addMaster(address payable _master , uint256 _masterPercent , string memory _investorCode ) public onlyOwner{\n        require(getMasterIndexByInvestorCode(_investorCode) == 0 \u0026\u0026 getMasterWithSlaveIndexByInvestorCode(_investorCode) == 0);\n        \n        Master memory newData = Master(_master, _masterPercent , _investorCode , true );\n        \n        masterData.push(newData);\n        investorCodeToMasterIndex[_investorCode] = masterData.length -1 ;\n    }\n    \n    function invalidateMaster(string memory _investorCode) public onlyOwner{\n        uint256 index1 = getMasterIndexByInvestorCode(_investorCode);\n        uint256 index2 = getMasterWithSlaveIndexByInvestorCode(_investorCode);\n        \n        masterData[index1].isMasterValid = false;\n        masterWithSlaveData[index2].isMasterValid = false;\n        masterWithSlaveData[index2].isSlaveValid = false;\n    }\n    \n     function validateMaster(string memory _investorCode) public onlyOwner{\n        uint256 index1 = getMasterIndexByInvestorCode(_investorCode);\n        uint256 index2 = getMasterWithSlaveIndexByInvestorCode(_investorCode);\n        \n        masterData[index1].isMasterValid = true;\n        masterWithSlaveData[index2].isMasterValid = true;\n        masterWithSlaveData[index2].isSlaveValid = true;\n\n    }\n    \n    \n  \n}\n\n"}}